#############################################################################
# Structr global configuration file
#############################################################################
#
# Place this file in the base.path directory.
#
# Please make sure this file is not publicly accessible
#
#############################################################################


#############################################################################
# Paths (database path see below in section Neo4j server settings)
#############################################################################
base.path = .
files.path = ./files
tmp.path = /tmp


#############################################################################
# General application-wide settings
#############################################################################

# Listener port for HTTP access REST and web service
application.http.port = 8082

# URL base path of REST server
application.rest.path = /structr/rest

# Listener port of built-in FTP server
application.ftp.port = 8021

# Listener port of built-in SSH server
application.ssh.port = 8022

# The title shown at start-up
application.title = Structr UI

# Listener address. Set this to the real ip address or localhost to restrict access,
# or to 0.0.0.0 to make this instance accessible over all ip addresses and hostnames
application.host = 0.0.0.0

# HTTPS settings
# run this command to create a selfsigned certificate:
# 'keytool -genkey -keyalg RSA -alias selfsigned -keystore [KEYSTORE_FILE] -storepass [KEYSTORE_PASSWORD] -validity 360 -keysize 2048'

# application.https.enabled = true
# application.https.port = 8083
# application.keystore.path = [KEYSTORE_FILE]
# application.keystore.password = [KEYSTORE_PASSWORD]

# Session timeout (default 30 minutes = 1800 seconds)
application.session.timeout = 1800

# Access rights to ownerless nodes (nodes without owner)
# Any combination of read, write, delete, accessControl is possible,
# default is read only
#application.security.ownerless.nodes = read

# Global proxy configuration
#application.proxy.http.url = http://localhost:3128
#application.proxy.http.username = 
#application.proxy.http.password = 


#############################################################################
# Neo4j server settings
#############################################################################

# With driver 'org.structr.bolt.BoltDatabaseService'
# and driver mode 'remote' Structr won't start a Neo4j database
database.driver = org.structr.bolt.BoltDatabaseService
database.driver.mode = embedded

database.connection.url = bolt://localhost:7687
database.connection.username = neo4j
database.connection.password = neo4j

# Directory with database files in embedded mode
database.path = ./db

database.cache.relationship.size = 1000
database.cache.node.size = 1000

########################################################
#                                                      #
#             !!!!!!!!! WARNING !!!!!!!!!              #
#                                                      #
# Don't expose this port to an untrusted network, as   #
# unauthorized users can access the database directly, #
# bypassing Structr's security measures.               #
#                                                      #
########################################################
# Neo4j HTTP server
neo4j.server.host = 0.0.0.0
neo4j.server.port = 7474

# Neo4j shell
neo4j.shell.enabled = true
neo4j.shell.port = 1337


#############################################################################
# Miscellaneous configuration
#############################################################################

# Configuration class providing custom schema classes
configuration.provider = org.structr.module.JarConfigurationProvider

# Configure services to automatically run at start-up
configured.services = NodeService AgentService CronService SchemaService LogService HttpService FtpService CloudService Neo4jService SSHService

# Superuser username and password
# You have to set a superuser username and password in order to use
# administration and maintenance tools
# IMPORTANT: this is *not* used as the main login credentials
superuser.username = superadmin
superuser.password = 

# Indentation
html.indentation = true
json.indentation = true
ws.indentation = true

# Use lenient serialization, e.g. allow to serialize NaN, -Infinity, Infinity instead of just returning null
# Please note: As long as Javascript doesn't support NaN etc., most of the UI will be broken
#json.lenient = true

# E-Mail settings: Set host and port of an MTA Structr will use to send e-mails
smtp.host = localhost
smtp.port = 25
#smtp.user =
#smtp.password =
smtp.tls.enabled = true
smtp.tls.required = false

# Ports for low-level binary protocols
tcp.port = 54555
#udp.port = 57555

# Default date format (SimpleDateFormat pattern), uncomment to enable full ISO8601 compliant date handling
#DateProperty.defaultFormat = yyyy-MM-dd'T'HH:mm:ss.SSSXXX


#############################################################################
# Servlets
#############################################################################

# Available servlets
HttpService.servlets = JsonRestServlet HtmlServlet WebSocketServlet CsvServlet UploadServlet ProxyServlet DeploymentServlet

# Uncomment this if you encounter problems with async HTTP requests
#HttpService.async = false

# JSON/REST servlet
JsonRestServlet.authenticator = org.structr.web.auth.UiAuthenticator
JsonRestServlet.class = org.structr.rest.servlet.JsonRestServlet
JsonRestServlet.defaultview = public
JsonRestServlet.outputdepth = 3
JsonRestServlet.path = /structr/rest/*
JsonRestServlet.resourceprovider = org.structr.web.common.UiResourceProvider
JsonRestServlet.user.autocreate = true

# HTML servlet
HtmlServlet.authenticator = org.structr.web.auth.UiAuthenticator
HtmlServlet.class = org.structr.web.servlet.HtmlServlet
HtmlServlet.defaultview = public
HtmlServlet.outputdepth = 3
HtmlServlet.path = /structr/html/*
HtmlServlet.resourceprovider = org.structr.web.common.UiResourceProvider
HtmlServlet.user.autocreate = true
HtmlServlet.resolveProperties = AbstractNode.name

# Websocket servlet
WebSocketServlet.authenticator = org.structr.web.auth.UiAuthenticator
WebSocketServlet.class = org.structr.websocket.servlet.WebSocketServlet
WebSocketServlet.defaultview = public
WebSocketServlet.path = /structr/ws/*
WebSocketServlet.resourceprovider = org.structr.web.common.UiResourceProvider
WebSocketServlet.user.autocreate = false

# Uncomment this if you want to use WebSocket functionality for frontend users
# WebSocketServlet.frontendAccess = true

# CSV servlet
CsvServlet.authenticator = org.structr.web.auth.UiAuthenticator
CsvServlet.class = org.structr.rest.servlet.CsvServlet
CsvServlet.defaultview = public
CsvServlet.outputdepth = 3
CsvServlet.path = /structr/csv/*
CsvServlet.resourceprovider = org.structr.web.common.UiResourceProvider
CsvServlet.user.autocreate = false

# Upload servlet
UploadServlet.authenticator = org.structr.web.auth.UiAuthenticator
UploadServlet.class = org.structr.web.servlet.UploadServlet
UploadServlet.defaultview = public
UploadServlet.outputdepth = 3
UploadServlet.path = /structr/upload
UploadServlet.resourceprovider = org.structr.web.common.UiResourceProvider
UploadServlet.user.autocreate = false
UploadServlet.allowAnonymousUploads = false

# Upload servlet limits (unit is MiB)
UploadServlet.maxFileSize = 1000
UploadServlet.maxRequestSize = 1200

# Proxy servlet
ProxyServlet.authenticator = org.structr.web.auth.UiAuthenticator
ProxyServlet.class = org.structr.web.servlet.ProxyServlet
ProxyServlet.path = /structr/proxy
ProxyServlet.resourceprovider = org.structr.web.common.UiResourceProvider

# Deployment servlet
DeploymentServlet.authenticator = org.structr.web.auth.UiAuthenticator
DeploymentServlet.class = org.structr.web.servlet.DeploymentServlet
DeploymentServlet.defaultview = public
DeploymentServlet.outputdepth = 3
DeploymentServlet.path = /structr/deploy
DeploymentServlet.resourceprovider = org.structr.web.common.UiResourceProvider
DeploymentServlet.user.autocreate = false
DeploymentServlet.allowAnonymousUploads = false

# Deployment servlet limits (unit is MiB)
DeploymentServlet.maxFileSize = 1000
DeploymentServlet.maxRequestSize = 1200


#############################################################################
# Custom response headers
#############################################################################
#
# Add your custom response headers here 
HtmlServlet.customResponseHeaders = Strict-Transport-Security:max-age\=60,\
X-Content-Type-Options:nosniff,\
X-Frame-Options:SAMEORIGIN,\
X-XSS-Protection:1;mode=block


#############################################################################
# Registration configuration
#############################################################################
# This section configures Structr's built-in opt-in registration for new users.
# Note that the eMail attribute is mandatory and necessary to send out e-mails.

# Use this to define custom properties to be set on the newly created user when
# included in the POST request. Works only together with HtmlServlet.user.autocreate = true.
# Note that eMail will always be included, so removing it here has no effect.
#
#                         !!!!!!!!! WARNING !!!!!!!!!
#
# It's a bad idea to include security-relevant attributes here
# as they can be set from an unauthenticated, unauthorized source.
# If unsure or you don't know what that means, set only eMail
Registration.customUserAttributes = eMail

# Set to true to allow users to login even before the opt-in confirmation
# was received, typically when the password was set on the registration POST request
#Registration.allowLoginBeforeConfirmation = false

# Use this class to create new user entities upon registration (supports dynamic types).
#Registration.customUserClass = User

#############################################################################
# Resource handler for static resources
#############################################################################
# This handler is needed to serve static files with the built-in Jetty container.
# It is used by Structr's default UI and should not be changed
# Example:
#
#     contextPath  = /pages
#     resourceBase = foo/bar
#
#     foo/bar/test.html => http://<hostname>:<port>/pages/test.html
#
# Available resource handlers
#

HttpService.resourceHandlers = StructrUiHandler
StructrUiHandler.contextPath = /structr
StructrUiHandler.directoriesListed = false
StructrUiHandler.resourceBase = src/main/resources/structr
StructrUiHandler.welcomeFiles = index.html


#############################################################################
# Cross Origin Resource Sharing configuration
#############################################################################
# This section configures the HTTP headers sent by Structr to control cross
# origin resource sharing, see http://www.w3.org/TR/cors.
#

#access.control.max.age = 3600
#access.control.allow.methods = GET,OPTIONS
#access.control.allow.headers = Content-Type,Accept,Content-Encoding,Location
#access.control.allow.credentials = false
#access.control.expose.headers = Location


#############################################################################
# Logging
#############################################################################
#
# Set to true to enable full request logging including request body
log.requests = false
log.name = structr-yyyy_mm_dd.request.log

# Set to true to enable logging of Cypher requests
# log.cypher.debug = true

# Log code generated for custom schema
#NodeExtender.log = true


#############################################################################
#        OAuth configuration        
#############################################################################
#
# Structr supports OAuth2 and OAuth1A (Twitter) authentication.
#
#
# In order to make external authentication work over OAuth,
# you need to configure the services you want to use.
#
# Please check the URLs and enter the credentials provided
# by the respective authentication service provider.
#
#
# OAuth servers

oauth.servers = github twitter linkedin google facebook

# See https://developer.github.com/v3/oauth/
oauth.github.authorization_location = https://github.com/login/oauth/authorize
oauth.github.token_location = https://github.com/login/oauth/access_token
oauth.github.client_id = 
oauth.github.client_secret = 
oauth.github.redirect_uri = /oauth/github/auth
oauth.github.user_details_resource_uri = https://api.github.com/user/emails
oauth.github.error_uri = /login
oauth.github.return_uri = /

# See https://dev.twitter.com/oauth and https://apps.twitter.com/
oauth.twitter.authorization_location = https://api.twitter.com/oauth/authorize
oauth.twitter.token_location = https://api.twitter.com/oauth/access_token
oauth.twitter.client_id = 
oauth.twitter.client_secret = 
oauth.twitter.redirect_uri = /oauth/twitter/auth
oauth.twitter.error_uri = /login
oauth.twitter.return_uri = /

# See https://developer.linkedin.com/documents/authentication
oauth.linkedin.authorization_location = https://www.linkedin.com/uas/oauth2/authorization
oauth.linkedin.token_location = https://www.linkedin.com/uas/oauth2/accessToken
oauth.linkedin.client_id = 
oauth.linkedin.client_secret = 
oauth.linkedin.redirect_uri = /oauth/linkedin/auth
oauth.linkedin.user_details_resource_uri = https://api.linkedin.com/v1/people/~/email-address?secure-urls=true
oauth.linkedin.error_uri = /login
oauth.linkedin.return_uri = /

# See https://developers.google.com/identity/protocols/OAuth2
oauth.google.authorization_location = https://accounts.google.com/o/oauth2/auth
oauth.google.token_location = https://accounts.google.com/o/oauth2/token
oauth.google.client_id = 
oauth.google.client_secret = 
oauth.google.redirect_uri = /oauth/google/auth
oauth.google.user_details_resource_uri = https://www.googleapis.com/oauth2/v3/userinfo
oauth.google.error_uri = /login
oauth.google.return_uri = /

# See: https://developers.facebook.com/docs/facebook-login/
oauth.facebook.authorization_location = https://www.facebook.com/dialog/oauth
oauth.facebook.token_location = https://graph.facebook.com/oauth/access_token
oauth.facebook.client_id = 
oauth.facebook.client_secret = 
oauth.facebook.redirect_uri = /oauth/facebook/auth
oauth.facebook.user_details_resource_uri = https://graph.facebook.com/me?fields=id,name,email
oauth.facebook.error_uri = /login
oauth.facebook.return_uri = /


#############################################################################
#        Geocoding configuration        
#############################################################################
#
# Structr supports geocoding via Bing and Google
#
#
# You just need to configure the desired geocoding provider, language and
# supply your API key (optional). Please note that some services have a
# rate limit for unauthenticated requests.
#
# Possible values for geocoding.provider are
# org.structr.common.geo.BingGeoCodingProvider
# org.structr.common.geo.GoogleGeoCodingProvider
#
# geocoding.language takes your country's language code
#
# geocoding.apikey takes your API key
# (leave commented out if not applicable)
#

#geocoding.provider=
#geocoding.language=
#geocoding.apikey=


#############################################################################
# Configuration for scheduled tasks (cron jobs)
#############################################################################
#
# The cron job configuration is a single line starting with "CronService.tasks = ", followed by
# a list of schema method names. Please note the the schema methods must not be attachted to
# a type, they must be "stand-alone" schema methods. After that, the cron expressions for the
# individual methods can be specified in a separate line in the following format:
#
# <full-qualified class name>.cronExpression = <seconds> <minutes> <hours> <days> <months> <days of week>
#
# Supported unit values are:
# x      at exact value of a unit (second, minute, hour etc.)
# *      every second, minute, ...
# */n    every nth value of a unit
# x-y    range from x to y

# Examples:
#
# Run every 30 minutes                                                      0   0,30  *   *    *    *
# Run every day at 4:00                                                     0    0    4   *    *    *
# Run each hour on Mondays during the first 10 days in April and October    0    0    *  1-10 4,10  1 

#CronService.tasks = method1 myMethod2 testMethod
#method1.cronExpression = 0 0 * * * *
#myMethod2.cronExpression = 0 0 * * * *
#testMEthod.cronExpression = 0 0 * * * *


# Enable/disable uniqueness constraint for files/folders, default is off (false)
# application.filesystem.unique.paths = false

# The instance name and stage configuration entries will be displayed in the top right corner of structr-ui
# application.instance.name =
# application.instance.stage =

# The absolute path (inside the Structr filesystem) for files being uploaded via the Upload Servlet
# The folder (hierarchy) will be auto-created if it does not exist (as superuser)
# application.uploads.folder = /upload/
